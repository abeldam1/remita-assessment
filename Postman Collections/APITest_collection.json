{
	"info": {
		"_postman_id": "5c67c9de-1702-40a6-a40c-07f0c8df9b7f",
		"name": "APITest collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "List users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2524028a-5fa9-415c-bdd7-ccaabec074b6",
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response content type is application/json', function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"})\r",
							"\r",
							"pm.test(\"Each user's data has an 'id' property\", function () {\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bc8383f2-b23a-4e3b-852e-706e7286b15a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}api/users?page=2",
					"host": [
						"{{baseurl}}api"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				},
				"description": "\nThis endpoint retrieves a list of users with pagination support. It accepts a query parameter 'page' to specify the page number of results to fetch.\n\n### Request\n\n- Method: GET\n- Endpoint: {{baseurl}}api/users\n- Query Parameters:\n  - page (number): Specifies the page number of results to fetch.\n\n### Response\n\n- Status: 200 OK\n- Body:\n  ```json\n  {\n    \"page\": 0,\n    \"per_page\": 0,\n    \"total\": 0,\n    \"total_pages\": 0,\n    \"data\": [\n      {\n        \"id\": 0,\n        \"email\": \"\",\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"avatar\": \"\"\n      }\n    ],\n    \"support\": {\n      \"url\": \"\",\n      \"text\": \"\"\n    }\n  }\n  ```\n\nThe response contains pagination information and an array of user data objects, each with 'id', 'email', 'first_name', 'last_name', and 'avatar' fields. The 'support' object provides additional support information with 'url' and 'text' fields.\n"
			},
			"response": []
		},
		{
			"name": "List users (Delayed response)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85a3a4a8-d218-4667-b5eb-5fd741cb4f1d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.within(3000, 4000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1dcfd72a-27f7-4255-b009-b9a9b777458d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}api/users?delay=3",
					"host": [
						"{{baseurl}}api"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				},
				"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of users with an optional delay of 3 seconds. The response will include pagination details such as page number, items per page, total count, total pages, and an array of user data containing their IDs, email addresses, first names, last names, and avatars. Additionally, the response includes support information with URL and text details.\n\nTo use this endpoint, simply make an HTTP GET request to the specified URL with an optional delay query parameter.\n\nExample:\n```\n{{baseurl}}api/users?delay=3\n```\n"
			},
			"response": []
		},
		{
			"name": "List single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88c3c274-d342-470d-abcb-836ec513d56f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User id is 2\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.data.id).to.equal(2);\r",
							"});\r",
							"\r",
							"pm.test(\"User has the email: janet.weaver@reqres.in\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.data.email).to.equal(\"janet.weaver@reqres.in\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "aa237ccb-d743-40b9-bc4a-8792500f9acc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseurl}}api/users/2",
				"description": "\nThis API endpoint makes an HTTP GET request to fetch user details based on the provided user ID. The request should be made to {{baseurl}}api/users/2. The response will have a status code of 200, and it will include the user's data along with support information.\n\nThe response will contain the user's ID, email, first name, last name, and avatar. Additionally, the response will also include support information with a URL and text.\n\nNo request body is required for this GET request.\n"
			},
			"response": []
		},
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "534d24d2-1bd9-440f-b8f0-38e20181fd25",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - name, job, id, and createdAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.job).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.createdAt).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "724a6ede-2a5e-432c-99bd-dadecdd15df2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/users",
				"description": "\nThis endpoint allows you to create a new user by sending a POST request to the specified URL. The request should include a JSON payload in the raw request body type with the keys \"name\" and \"job\".\n\n### Request Body\n- `name` (string, required): The name of the user.\n- `job` (string, required): The job title of the user.\n\nUpon a successful execution, the response will have a status code of 201, indicating that the user has been created. The response body will include the details of the newly created user, including the `name`, `job`, `id`, and `createdAt` properties.\n\n### Response\n- `name` (string): The name of the user.\n- `job` (string): The job title of the user.\n- `id` (string): The unique identifier of the user.\n- `createdAt` (string): The timestamp indicating when the user was created.\n"
			},
			"response": []
		},
		{
			"name": "Update user info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd2d3e39-d943-4071-ab88-22ad33f14890",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"   pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Name value should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.name).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Job value should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.job).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "26b24808-301a-4155-ba6d-bc243eef0ace",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/users/2",
				"description": "\nThis API endpoint allows you to update user information by sending an HTTP PUT request to the specified URL. The request should include the user ID in the URL path and the updated user details in the request body.\n\n### Request Body\n- `name` (string, optional): The updated name of the user.\n- `job` (string, optional): The updated job title of the user.\n\n### Response\nUpon a successful execution of the request, the server will respond with a status code of 200 and a JSON object containing the updated user information, including the `name`, `job`, and `updatedAt` fields.\n\nExample:\n```json\n{\n    \"name\": \"\",\n    \"job\": \"\",\n    \"updatedAt\": \"\"\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "Update user info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32e00c8d-09d5-437b-b245-0dde8ea7c824",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"   pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Name value should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required field - updatedAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.updatedAt).to.exist;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "35b8e146-b969-43d5-bdc0-473c868527a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/users/2"
			},
			"response": []
		},
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e30e8bda-79a2-41fc-b525-fa71eb0d4113",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - id and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Id value is a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "99dc4089-7f94-474e-b2a4-15ab457dea2a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/register",
				"description": "This API endpoint allows users to register by sending a POST request to the specified URL. The request should include the user's email and password in the request body.\n\n### Request Body\n\n- email (string, required): The email of the user.\n- password (string, required): The password for the user account.\n    \n\n### Response\n\n- id (number): The unique identifier for the registered user.\n- token (string): The authentication token for the registered user.\n    \n\nUpon successful registration, the server will respond with a status code of 200 and provide the user's ID and authentication token in the response body."
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fe35b81-f804-4ee3-8d39-ef1181eed2a1",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'missing password'\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).to.equal(\"Missing password\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e79941e1-c00b-44ed-8c38-9b3a9b516150",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/register",
				"description": "This endpoint is used to register a new user. When making a POST request to {{baseurl}}api/register, the request should include a raw body with the user's email in the payload.\n\n### Request Body\n\n- email (string, required): The email of the user to be registered.\n    \n\n### Response\n\nThe endpoint returns a status code of 400 in case of an error, along with an error message in the response body.\n\nExample:\n\n```\n{\n    \"error\": \"Error message here\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a69ab5f8-5def-4c48-b4ef-281de0ef114b",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Token should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.exist.and.to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "563a0262-3351-4b4b-b77b-cdfbd28f5610",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/login",
				"description": "This API endpoint is used to authenticate and login a user. Upon successful authentication, the server returns a token which can be used for further authorized requests.\n\n### Request Body\n\n- email (text, required): The email address of the user.\n- password (text, required): The password of the user.\n    \n\n### Response\n\n- Status: 200 OK\n- token (string): The authentication token for the user."
			},
			"response": []
		},
		{
			"name": "Login - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23ac99af-757a-4fbe-a71e-ddea0d000249",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'missing password'\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).to.equal(\"Missing password\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "14406dfb-5097-44cd-9c0e-6c761d6471c4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}api/login",
				"description": "This endpoint is used to authenticate and login a user. The HTTP POST request should be made to {{baseurl}}api/login with the user's email provided in the request body.\n\n### Request Body\n\n- email (string, required): The email of the user trying to login.\n    \n\n### Response\n\n- Status: 400\n- error (string): A message indicating the reason for the login failure."
			},
			"response": []
		}
	]
}